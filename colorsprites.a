
	processor 6502
        include "vcs.h"
        include "macro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; This asm is an excercise to understand how HMOVE sets
; A range between -8 and 7 wrt RESP. Both Sprites are used
; The first appears as the diagonal line, the second as a
; straight line. Challenge to the reader: WHY ARE ONLY THE
; POSITIVE VALUES of HMOV rendering the Sprite? 
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SpriteHeight	equ 8

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Variables segment

        seg.u Variables
	org $80

HiNibFine		.byte

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Code segment

	seg Code
        org $f000

Start
	CLEAN_START
        lda #%10000000	; Set Hunion
        sta HiNibFine	; 	to minimum coarse

NextFrame
; This macro efficiently gives us 1 + 3 lines of VSYNC
	VERTICAL_SYNC
	
; 36 lines of VBLANK
	ldx #36
LVBlank	sta WSYNC
	dex
	bne LVBlank
; Disable VBLANK
        stx VBLANK
        
        lda #$80		; Set Player one Sprit
        sta GRP0	;			to a dot
	lda #$01
        sta GRP1
; Draw the 192 scanlines
	ldx #192
ScanLoop

	REPEAT 8
	nop
        REPEND

        lda HiNibFine
        clc
        adc #%00010000

	sta HMCLR

        sta HMP0	; set fine pos of P0 Sprite
        sta RESP0	; set coarse
        sta RESP1
        sta WSYNC	; wait for next scanline
        sta HMOVE
        stx COLUBK	; set the background color
        sta HiNibFine
	dex
	bne ScanLoop

	lda #2		; Reenable VBLANK for bottom (and top of next frame)
        sta VBLANK
; 30 lines of overscan
	ldx #30
LVOver	sta WSYNC
	dex
	bne LVOver
	
; Go back and do another frame
	jmp NextFrame
                
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Epilogue

	org $fffc
        .word Start	; reset vector
        .word Start	; BRK vector
